// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeDens1

Texture3D<float4> NoiseVol1;
Texture3D<float4> NoiseVol2;
Texture3D<float4> NoiseVol3;
Texture3D<float4> NoiseVol4;

SamplerState _LinearRepeat;
SamplerState samplerNoiseVol1;

float invVoxelDim;
float3 wsChunkPosLL;
uint3 wsChunkDim;
RWTexture3D<float> densityTexture;
float SphereDensity(uint3 tID)
{
	float invVoxelDim = 1.0f / 32.0f;
	float radius = 0.7f;
	float3 localPos = float3((tID.x * invVoxelDim), (tID.y * invVoxelDim), (tID.z * invVoxelDim));
	float3 diff = float3(0.0f,0.0f,0.0f) - localPos.xyz;
	return -(length(diff) - radius);
}

// since threadID goes from (0,0,0) top-left to (32,32,32) bottom-right we invert the y axis to reflect chunk
// Example: (5,20,10) -> (5, 12, 10)
uint3 threadIdToCellCoord(uint3 tID)
{
	tID.y = 32 - tID.y;
	return tID;
}

float3 threadIdToWorldCoord(uint3 tID)
{
	// transform to cell position in chunk
	//tID.y = 32 - tID.y;

	// transform from cell coord to local coordinate 0-1 within chunk. (0,0,0) lower-left-front (1,1,1) top-right-back
	float3 localPos = float3((tID.x * invVoxelDim), (tID.y * invVoxelDim), (tID.z * invVoxelDim));
	return wsChunkPosLL + (localPos * wsChunkDim);

}

float SampleDensityMaps(float3 ws)
{
	/*
	float density = -ws.y;
	float3 offset = float3(0.0f, 0.0f, 0.0f);

	// high frequency noise

	density += NoiseVol1.SampleLevel(_LinearRepeat, ws*2.5, 0).x*0.5;
	density += NoiseVol2.SampleLevel(_LinearRepeat, ws*5.35, 0).x*0.32;
	density += NoiseVol3.SampleLevel(_LinearRepeat, ws*10.25, 0).x*0.50;
	density += NoiseVol4.SampleLevel(_LinearRepeat, ws*4.7, 0).x*0.1;

	density += NoiseVol1.SampleLevel(_LinearRepeat, ws*0.06, 0).x*3.25;
	//density += NoiseVol2.SampleLevel(_LinearRepeat, ws*0.01, 0).x*8.50;
	//density += NoiseVol3.SampleLevel(_LinearRepeat, ws*0.001, 0).x*5.00;
	density += NoiseVol4.SampleLevel(_LinearRepeat, ws*0.01, 0).x*16.41;

	return density;

	*/


	float density = -ws.y;
	float3 offset = float3(0.0f, 0.0f, 0.0f);

	// high frequency noise

	density += NoiseVol1.SampleLevel(samplerNoiseVol1, ws*2.5, 0, offset).x*0.5;
	density += NoiseVol2.SampleLevel(samplerNoiseVol1, ws*5.35, 0, offset).x*0.32;
	density += NoiseVol3.SampleLevel(samplerNoiseVol1, ws*10.25, 0, offset).x*0.50;
	density += NoiseVol4.SampleLevel(samplerNoiseVol1, ws*4.7, 0, offset).x*0.1;

	density += NoiseVol1.SampleLevel(samplerNoiseVol1, ws*0.06, 0, offset).x*3.25;
	//density += NoiseVol2.SampleLevel(samplerNoiseVol1, ws*0.01, 0, offset).x*8.50;
	//density += NoiseVol3.SampleLevel(samplerNoiseVol1, ws*0.001, 0, offset).x*5.00;
	density += NoiseVol4.SampleLevel(samplerNoiseVol1, ws*0.01, 0, offset).x*16.41;

	return density;
}

[numthreads(32,32,1)]
void ComputeDens1 (uint3 id : SV_DispatchThreadID)
{
    
	float density = SampleDensityMaps(threadIdToWorldCoord(id));
	density = SphereDensity(id);
	// thread id (0,0,0) should write to densityTextures lower-left corner, thus inver y-axis
	uint3 writeCoord = id;
	writeCoord.y = 31 - writeCoord.y;
	
	densityTexture[writeCoord] = density;
    
}

// This is the kernel that will write to the corner cells to the far right.
// that is why we can set the x-coordinate to 32 (33 texels from 0-32). 
// Each thread group will write to the rightmost vertical strip of the texture along the y-axis, each thread group will
// be responsible for one depth-layer. There will be a total of 33 thread groups. 
// Example: ThreadGroup0 will have ids:(0,0,0) to (0,32,0), ThreadGroup1 (0,0,1) - (0, 32, 1) and so on.
// the other as indexing straight into the texture, thread ID:s will range from(0,0,0) to (0,32,32)
#pragma kernel ComputeDens2
[numthreads(1,33,1)]
void ComputeDens2 (uint3 id : SV_DispatchThreadID)
{
	// COMMENT: TRY TO JUST SET id.x = 32
    uint3 writeCoord = id;
	writeCoord.x = 32;	// force the x to be 32 since we are working we the right most vertical strip.
	float density = SampleDensityMaps(threadIdToWorldCoord(writeCoord));
	density = SphereDensity(writeCoord);
	// invert y-axis so we write at the correct location for the chunk reads.
	writeCoord.y = 32 - writeCoord.y;
	densityTexture[writeCoord] = density;

    
}

